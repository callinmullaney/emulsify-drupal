// Color Usage variables - use these (via the `clr` function below)
// rather than color variables directly.
$color-palette: (
  default-theme: (
    white: #FFF,
    black: #000,
    message: $green-light,
    warning: $yellow-light,
    error: $red-light,
    muted: $near-white,
    primary: $blue,
    secondary: $purple,
    text: (
      base: $gray-dark,
      inverse: $gray-lightest
    ),
    background: (
      base: $white,
      section: $gray-lightest
    ),
    accent: (
      base: $gray-dark,
      high: $black
    ),
    highlight: (
      base: $gray-lighter,
      high: $gray-lightest
    )
  ),
  alt-theme: (
    white: #FFF,
    black: #000,
    message: #A7D129,
    warning: #FFD700,
    error: #C02739,
    muted: $gray-darker,
    primary: $blue,
    secondary: $purple,
    text: (
      base: $white,
      inverse: $gray
    ),
    background: (
      base: $gray-darker,
      inverse: $gray-light,
      section: $gray-dark
    ),
    accent: (
      base: $gray-lightest,
      inverse: $white,
      high: $near-white
    ),
    highlight: (
      base: $gray-dark,
      high: $gray-darker
    )
  )
);

///////////
// Usage //
///////////
// This color function makes it easy for you to call a color by it's functional
// name anywhere you need.
// E.g. to use the `text` color, you type: `color: clr(text);`
//
// How it works:
// This function works in conjunction with the dynamic css custom properties
// declarations below. The item called in the function is prefixed with
// `var(--c-` to call the custom property for that color.
// E.g. `color: clr(text);` will return `color: var(--c-text);`
// Note: (The `--c-` is added via the `@each` loops below)
@function clr($name, $variant:null, $alpha: 1, $theme:default-theme) {

  // Return theme specific variant.
  @if ($variant != null) {
    // Check if alpha is default value or overwritten.
    @if (type-of($alpha) == number) {
      // Return variant as alpha value.
      @if (type-of($variant) == number) {
        // Return color value if it doesn't have variations or assume 
        // the base color from multi-dimensional array.
        @if (type-of(map-get(map-get($color-palette, $theme), $name)) == color) {
          @return rgba(map-get(map-get($color-palette, $theme), $name), $variant);
        }
        @else {
          @return rgba(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), $variant);
        }
      }
      @else {
        // Return theme specific color assume default-theme.
        @if (map-has-key($color-palette, $variant)) {
          // Return color value if it doesn't have variations or assume 
          // the base color from multi-dimensional array.
          @if (type-of(map-get(map-get($color-palette, $variant), $name)) == color) {
            @return rgba(map-get(map-get($color-palette, $variant), $name), $alpha);
          }
          @else {
            @return rgba(map-get(map-get(map-get($color-palette, $variant), $name), 'base'), $alpha);
          }
        }
        @else {
          @return rgba(map-get(map-get(map-get($color-palette, $theme), $name), $variant), $alpha);
        }
      }
    }
    // Check if the alpha matches a color palettes theme name.
    @else if (map-has-key($color-palette, $alpha)) {
      // Return color theme specific color or base color from variants.
      @if (type-of(map-get(map-get($color-palette, $alpha), $name)) == map) {
        @return rgba(map-get(map-get(map-get($color-palette, $alpha), $name), 'base'), 1);
      }
      @else {
        @return rgba(map-get(map-get($color-palette, $alpha), $name), 1);
      }
    }
    @else {
      @error "Property #{$alpha} must be either an alpha number or theme name.";
    }
  }
  // Return nested base color
  @else if ($variant == null and type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
    @return rgba(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), $alpha);
  }
  // Return colors without variations.
  @else {
    @return rgba(map-get(map-get($color-palette, $theme), $name), $alpha);
  }
}

// Create CSS custom properties
// This is what powers the built-in OS light/dark mode switching.
// For each color variable above (e.g. `text` and `background`) a css custom
// property will be created. (e.g. `--c-text:` and `--c-background:`).
//
// The first `@each` below will create a custom property for each item in the
// `$defaultColors` map. So put all of your default colors there.
//
// The `prefers-color-scheme: dark` media query below will then create custom
// properties for each of the colors in the `$darkColors` map only if the
// browser supports that feature. If there is an exact match (e.g. `text`) in
// both maps, the one from `$darkColors` will be used on machines that have
// opted to use the 'dark mode' on their OS.
:root {
  // Create custom properties for default-theme colors
  @each $theme, $palette in $color-palette {

    @if ($theme == default-theme) {

      @each $name, $color in $palette {

        @if (type-of($color) == map) {

          @each $clrname, $color in $name {
            --c-#{$name}-#{$clrname}: #{$color};
          }
        }
        @else {
          --c-#{$name}: #{$color};
        }
      }
    }
  }

  // Create custom properties for dark colors, an duse them if the user's OS has dark mode enabled
  @media (prefers-color-scheme: dark) {
    @each $theme in $color-palette {

      @if ($theme == alt-theme) {
        
        @each $name, $color in $palette {

          @if (type-of($color) == map) {

            @each $clrname, $color in $name {
              --c-#{$name}-#{$clrname}: #{$color};
            }
          }
          @else {
            --c-#{$name}: #{$color};
          }
        }
      }
    }
  }

  // Use the default color scheme for the "Default Theme" section of the
  // component library regardless of OS setting.
  // This is required to show the correct colors in the component library at all times
  [data-theme='default'] {
    @each $theme in $color-palette {

      @if ($theme == default-theme) {
        
        @each $name, $color in $palette {

          @if (type-of($color) == map) {

            @each $clrname, $color in $name {
              --c-#{$name}-#{$clrname}: #{$color};
            }
          }
          @else {
            --c-#{$name}: #{$color};
          }
        }
      }
    }
  }

  // Use the dark color scheme for the "Dark Theme" section of the  component
  // library regardless of OS setting.
  // This is required to show the correct colors in the component library at all times
  [data-theme='dark'] {
    @each $theme in $color-palette {

      @if ($theme == alt-theme) {
        
        @each $name, $color in $palette {

          @if (type-of($color) == map) {

            @each $clrname, $color in $name {
              --c-#{$name}-#{$clrname}: #{$color};
            }
          }
          @else {
            --c-#{$name}: #{$color};
          }
        }
      }
    }
  }
}
