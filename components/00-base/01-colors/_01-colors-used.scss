///////////
// Usage //
///////////
// This color function makes it easy for you to call a color by it's functional
// name anywhere you need.
// E.g. to use the `text` color, you type: `color: clr(text);`
//
// How it works:
// This function works in conjunction with the dynamic css custom properties
// declarations below. The item called in the function is prefixed with
// `var(--c-` to call the custom property for that color.
// E.g. `color: clr(text);` will return `color: rgba(var(--c-text), 1);`
// Note: (The `--c-` is added via the `@each` loops below)
// This function also accepts an alpha number argument that will
// return the color value as rgba + property.
@function clr($name, $variant:null, $alpha: 1, $theme:default) {
  // Coverage: clr(text)
  @if ($variant == null) {
    @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
      @return #{'hsla('}
        var(
          --c-#{$name}, 
          cnvrt-to-hsl(map-get(map-get(map-get($color-palette, $theme), $name), 'base'))
        ), 
        $alpha
      #{')'};
    }
    @else {
      @return #{'hsla('}
          var(
            --c-#{$name}, 
            cnvrt-to-hsl(map-get(map-get($color-palette, $theme), $name))
          ), 
          $alpha
        #{')'};
    }
  }
  // Return variant as alpha value.
  // Coverage: clr(text, 0.5), clr(text, 0.5, contrast)
  @if ($variant != null and type-of($variant) == number) {
    @if (map-has-key($color-palette, $alpha)) {
      // Return color value if it doesn't have variations or assume 
      // the base color from multi-dimensional array.
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$alpha}, 
              cnvrt-to-hsl(map-get(map-get(map-get($color-palette, $theme), $name), 'base'))
            ), 
            $variant
          #{')'};
      } 
      @else {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$alpha}, 
              cnvrt-to-hsl(map-get(map-get($color-palette, $theme), $name))
            ), 
            $variant
          #{')'};
      }
    }
    @else {
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return #{'hsla('}
            var(
              --c-#{$name}, 
              cnvrt-to-hsl(map-get(map-get(map-get($color-palette, $theme), $name), 'base'))
            ), 
            $variant
          #{')'};
      }
      @else {
        @return #{'hsla('}
            var(
              --c-#{$name}, 
              cnvrt-to-hsl(map-get(map-get($color-palette, $theme), $name))
            ), 
            $variant
          #{')'};
      }
    }
  }
  // Coverage: clr(text, inverse), 
  // clr(text, inverse, 0.5), clr(text, contrast), clr(text, contrast, 0.5),
  // clr(text, inverse, contrast), clr(text, inverse, 0.5, contrast)
  @if ($variant != null and type-of($variant) == string) {
    // Return theme specific color if it's defined.
    // Coverage: clr(text, contrast), clr(text, contrast, 0.5)
    @if (map-has-key($color-palette, $variant)) {
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$variant}, 
              cnvrt-to-hsl(map-get(map-get(map-get($color-palette, $variant), $name), 'base'))
            ), 
            $alpha
          #{')'};
      }
      @else {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$variant}, 
              cnvrt-to-hsl(map-get(map-get($color-palette, $variant), $name))
            ), 
            $alpha
          #{')'};
      }
    }
    // Coverage: clr(text, inverse), clr(text, inverse, 0.5), 
    // clr(text, inverse, contrast), clr(text, inverse, 0.5, contrast)
    @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
      // Coverage: clr(text, inverse), 
      // clr(text, inverse, 0.5), clr(text, contrast, 0.5),
      // clr(text, inverse, 0.5, contrast)
      @if (type-of($alpha) == number) {
        @if (map-has-key($color-palette, $variant) and type-of(map-get(map-get($color-palette, $variant), $name)) == map) {
          @return #{'hsla('}
              var(
                --c-#{$name}-#{$variant}, 
                cnvrt-to-hsl(map-get(map-get(map-get($color-palette, $variant), $name), 'base'))
              ), 
              $alpha
            #{')'};
        }
        @else {
          @return #{'hsla('}
              var(
                --c-#{$name}-#{$variant}, 
                cnvrt-to-hsl(map-get(map-get(map-get($color-palette, $theme), $name), $variant))
              ), 
              $alpha
            #{')'};
        }
      }
      // Coverage: clr(text, inverse, contrast)
      @else if (map-has-key($color-palette, $alpha)) {
        @return #{'hsla('}
            var(
              --c-#{$name}-#{$variant}-#{$alpha}, 
              cnvrt-to-hsl(map-get(map-get(map-get($color-palette, $alpha), $name), $variant))
            ), 
            1
          #{')'};
      }
      @else {
        @error "Property #{$alpha} must be either an alpha number or theme name.";
      }
    }
    @else {
      @return #{'hsla('}
          var(
            --c-#{$name}-#{$variant}, 
            cnvrt-to-hsl(map-get(map-get(map-get($color-palette, $theme), $name), $variant))
          ), 
          $alpha
        #{')'};
    }
  }
}

// Create CSS custom properties
// This is what powers the built-in OS light/dark mode switching.
// For each color variable above (e.g. `text` and `background`) a css custom
// property will be created. (e.g. `--c-text:` and `--c-background:`).
//
// The first `@each` below will create a custom property for each item in the
// `$defaultColors` map. So put all of your default colors there.
//
// The `prefers-color-scheme: dark` media query below will then create custom
// properties for each of the colors in the `$darkColors` map only if the
// browser supports that feature. If there is an exact match (e.g. `text`) in
// both maps, the one from `$darkColors` will be used on machines that have
// opted to use the 'dark mode' on their OS.
:root {
  // Create custom properties for default-theme colors
  @each $theme, $palette in $color-palette {

    @if ($theme == 'default') {

      @each $name, $color in $palette {

        @if (type-of($color) == map) {

          @each $clrname, $value in $color {
            @if ($clrname == 'base') {
              --c-#{$name}: #{cnvrt-to-hsl($value)};
            }
            @else {
              --c-#{$name}-#{$clrname}: #{cnvrt-to-hsl($value)};
            }
          }
        }
        @else {
          --c-#{$name}: #{cnvrt-to-hsl($color)};
        }
      }
    }
    @else {

      @each $name, $color in $palette {

        @if (type-of($color) == map) {

          @each $clrname, $value in $color {
            @if ($clrname == 'base') {
              --c-#{$name}-#{$theme}: #{cnvrt-to-hsl($value)};
            }
            @else {
              --c-#{$name}-#{$clrname}-#{$theme}: #{cnvrt-to-hsl($value)};
            }
          }
        }
        @else {
          --c-#{$name}-#{$theme}: #{cnvrt-to-hsl($color)};
        }
      }
    }
  }

  // Create custom properties for contrast colors, and use them if the user's OS has dark mode enabled.
  @media (prefers-color-scheme: dark) {
    @each $theme, $palette in $color-palette {

      @if ($theme == 'contrast') {
        
        @each $name, $color in $palette {

          @if (type-of($color) == map) {

            @each $clrname, $value in $color {
              @if ($clrname == 'base') {
                --c-#{$name}: #{cnvrt-to-hsl($value)};
              }
              @else {
                --c-#{$name}-#{$clrname}: #{cnvrt-to-hsl($value)};
              }
            }
          }
          @else {
            --c-#{$name}: #{cnvrt-to-hsl($color)};
          }
        }
      }
    }
  }
  // Use the default color scheme for the "Default Theme" section of the
  // component library regardless of OS setting.
  // This is required to show the correct colors in the component library at all times
  @each $theme, $palette in $color-palette {

    [data-theme='#{$theme}'] {
      
      @each $name, $color in $palette {

        @if (type-of($color) == map) {

          @each $clrname, $value in $color {
            @if ($clrname == 'base') {
              --c-#{$name}: #{cnvrt-to-hsl($value)};
            }
            @else {
              --c-#{$name}-#{$clrname}: #{cnvrt-to-hsl($value)};
            }
          }
        }
        @else {
          --c-#{$name}: #{cnvrt-to-hsl($color)};
        }
      }
    }
  }
}
